Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    t_tk_break
    t_tk_condicional_else
    t_tk_continue
    t_tk_iterativo_do
    t_tk_iterativo_while
    t_tk_reservada_return
    t_tk_reservda_void
    t_tk_tipo_boolean
    t_tk_tipo_char
    t_tk_tipo_double
    t_tk_tipo_int
    t_tk_tipo_string
    tk_and
    tk_break
    tk_comentario_simple
    tk_comentario_var_filas
    tk_condicional
    tk_condicional_else
    tk_continue
    tk_diferenciacion
    tk_division
    tk_igualacion
    tk_iterativo_do
    tk_iterativo_while
    tk_llave_abierta
    tk_llave_cerrada
    tk_mayor_o_igual_que
    tk_mayor_que
    tk_menor_o_igual_que
    tk_menor_que
    tk_multiplicacion
    tk_not
    tk_or
    tk_par_abierto
    tk_par_cerrado
    tk_reservada_return
    tk_resta
    tk_resto
    tk_suma

Grammar

Rule 0     S' -> INITIAL
Rule 1     INITIAL -> INSTRUCCIONES
Rule 2     INSTRUCCIONES -> INSTRUCCIONES INSTRUCCIONES2
Rule 3     INSTRUCCIONES -> INSTRUCCIONES2
Rule 4     INSTRUCCIONES2 -> tk_reservda_void
Rule 5     INSTRUCCIONES4 -> INSTRUCCIONES4 INST5
Rule 6     INSTRUCCIONES4 -> INST5
Rule 7     INST5 -> DECLARACION_VAR
Rule 8     INST5 -> ASIG
Rule 9     DECLARACION_VAR -> DECLARACION_VAR DESCRIPCION
Rule 10    DECLARACION_VAR -> DESCRIPCION
Rule 11    DESCRIPCION -> tk_dato_tipo_Int tk_identificador tk_asignacion tk_tipo_int tk_punto_coma
Rule 12    DESCRIPCION -> tk_dato_double tk_identificador tk_asignacion tk_tipo_double tk_punto_coma
Rule 13    DESCRIPCION -> tk_dato_string tk_identificador tk_asignacion tk_tipo_string tk_punto_coma
Rule 14    DESCRIPCION -> tk_dato_char tk_identificador tk_asignacion tk_tipo_char tk_punto_coma
Rule 15    DESCRIPCION -> tk_tipo_boolean tk_identificador tk_asignacion tk_boolean_true tk_punto_coma
Rule 16    DESCRIPCION -> tk_tipo_boolean tk_identificador tk_asignacion tk_boolean_false tk_punto_coma
Rule 17    ASIG -> ASIG DESCRIPCION_2
Rule 18    ASIG -> DESCRIPCION_2
Rule 19    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_tipo_int tk_punto_coma
Rule 20    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_tipo_double tk_punto_coma
Rule 21    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_tipo_string tk_punto_coma
Rule 22    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_tipo_char tk_punto_coma
Rule 23    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_boolean_true tk_punto_coma
Rule 24    DESCRIPCION_2 -> tk_identificador tk_asignacion tk_boolean_false tk_punto_coma
Rule 25    INSTRUCCIONES3 -> INSTRUCCIONES3 tk_punto_coma DESCRIPCION_3
Rule 26    INSTRUCCIONES3 -> DESCRIPCION_3
Rule 27    DESCRIPCION_3 -> tk_dato_tipo_Int tk_identificador
Rule 28    DESCRIPCION_3 -> tk_dato_string tk_identificador

Terminals, with rules where they appear

error                : 
t_tk_break           : 
t_tk_condicional_else : 
t_tk_continue        : 
t_tk_iterativo_do    : 
t_tk_iterativo_while : 
t_tk_reservada_return : 
t_tk_reservda_void   : 
t_tk_tipo_boolean    : 
t_tk_tipo_char       : 
t_tk_tipo_double     : 
t_tk_tipo_int        : 
t_tk_tipo_string     : 
tk_and               : 
tk_asignacion        : 11 12 13 14 15 16 19 20 21 22 23 24
tk_boolean_false     : 16 24
tk_boolean_true      : 15 23
tk_break             : 
tk_comentario_simple : 
tk_comentario_var_filas : 
tk_condicional       : 
tk_condicional_else  : 
tk_continue          : 
tk_dato_char         : 14
tk_dato_double       : 12
tk_dato_string       : 13 28
tk_dato_tipo_Int     : 11 27
tk_diferenciacion    : 
tk_division          : 
tk_identificador     : 11 12 13 14 15 16 19 20 21 22 23 24 27 28
tk_igualacion        : 
tk_iterativo_do      : 
tk_iterativo_while   : 
tk_llave_abierta     : 
tk_llave_cerrada     : 
tk_mayor_o_igual_que : 
tk_mayor_que         : 
tk_menor_o_igual_que : 
tk_menor_que         : 
tk_multiplicacion    : 
tk_not               : 
tk_or                : 
tk_par_abierto       : 
tk_par_cerrado       : 
tk_punto_coma        : 11 12 13 14 15 16 19 20 21 22 23 24 25
tk_reservada_return  : 
tk_reservda_void     : 4
tk_resta             : 
tk_resto             : 
tk_suma              : 
tk_tipo_boolean      : 15 16
tk_tipo_char         : 14 22
tk_tipo_double       : 12 20
tk_tipo_int          : 11 19
tk_tipo_string       : 13 21

Nonterminals, with rules where they appear

ASIG                 : 8 17
DECLARACION_VAR      : 7 9
DESCRIPCION          : 9 10
DESCRIPCION_2        : 17 18
DESCRIPCION_3        : 25 26
INITIAL              : 0
INST5                : 5 6
INSTRUCCIONES        : 1 2
INSTRUCCIONES2       : 2 3
INSTRUCCIONES3       : 25
INSTRUCCIONES4       : 5

Parsing method: LALR

state 0

    (0) S' -> . INITIAL
    (1) INITIAL -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCIONES2
    (3) INSTRUCCIONES -> . INSTRUCCIONES2
    (4) INSTRUCCIONES2 -> . tk_reservda_void

    tk_reservda_void shift and go to state 4

    INITIAL                        shift and go to state 1
    INSTRUCCIONES                  shift and go to state 2
    INSTRUCCIONES2                 shift and go to state 3

state 1

    (0) S' -> INITIAL .



state 2

    (1) INITIAL -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCIONES2
    (4) INSTRUCCIONES2 -> . tk_reservda_void

    $end            reduce using rule 1 (INITIAL -> INSTRUCCIONES .)
    tk_reservda_void shift and go to state 4

    INSTRUCCIONES2                 shift and go to state 5

state 3

    (3) INSTRUCCIONES -> INSTRUCCIONES2 .

    tk_reservda_void reduce using rule 3 (INSTRUCCIONES -> INSTRUCCIONES2 .)
    $end            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCIONES2 .)


state 4

    (4) INSTRUCCIONES2 -> tk_reservda_void .

    tk_reservda_void reduce using rule 4 (INSTRUCCIONES2 -> tk_reservda_void .)
    $end            reduce using rule 4 (INSTRUCCIONES2 -> tk_reservda_void .)


state 5

    (2) INSTRUCCIONES -> INSTRUCCIONES INSTRUCCIONES2 .

    tk_reservda_void reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCIONES2 .)
    $end            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCIONES2 .)

