
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'INITIALleftoperador_sumaoperador_restaleftoperador_multiplicacionoperador_divisionoperador_restoid numero operador_division operador_multiplicacion operador_resta operador_resto operador_suma reservada_fin reservada_inicio\n  INITIAL : reservada_inicio EXPRESSIONS reservada_fin\n  \n  EXPRESSIONS : EXPRESSIONS E\n              | E\n  \n  E : E operador_suma E\n    | E operador_resta E\n    | E operador_multiplicacion E\n    | E operador_division E\n    | E operador_resto E\n    | id\n    | numero\n  '
    
_lr_action_items = {'reservada_inicio':([0,],[2,]),'$end':([1,7,],[0,-1,]),'id':([2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,],[5,5,-3,-9,-10,-2,5,5,5,5,5,-4,-5,-6,-7,-8,]),'numero':([2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,],[6,6,-3,-9,-10,-2,6,6,6,6,6,-4,-5,-6,-7,-8,]),'reservada_fin':([3,4,5,6,8,14,15,16,17,18,],[7,-3,-9,-10,-2,-4,-5,-6,-7,-8,]),'operador_suma':([4,5,6,8,14,15,16,17,18,],[9,-9,-10,9,-4,-5,-6,-7,-8,]),'operador_resta':([4,5,6,8,14,15,16,17,18,],[10,-9,-10,10,-4,-5,-6,-7,-8,]),'operador_multiplicacion':([4,5,6,8,14,15,16,17,18,],[11,-9,-10,11,11,11,-6,-7,-8,]),'operador_division':([4,5,6,8,14,15,16,17,18,],[12,-9,-10,12,12,12,-6,-7,-8,]),'operador_resto':([4,5,6,8,14,15,16,17,18,],[13,-9,-10,13,13,13,-6,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'INITIAL':([0,],[1,]),'EXPRESSIONS':([2,],[3,]),'E':([2,3,9,10,11,12,13,],[4,8,14,15,16,17,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> INITIAL","S'",1,None,None,None),
  ('INITIAL -> reservada_inicio EXPRESSIONS reservada_fin','INITIAL',3,'p_INITIAL','prueba.py',74),
  ('EXPRESSIONS -> EXPRESSIONS E','EXPRESSIONS',2,'p_EXPRESSIONS','prueba.py',80),
  ('EXPRESSIONS -> E','EXPRESSIONS',1,'p_EXPRESSIONS','prueba.py',81),
  ('E -> E operador_suma E','E',3,'p_E','prueba.py',91),
  ('E -> E operador_resta E','E',3,'p_E','prueba.py',92),
  ('E -> E operador_multiplicacion E','E',3,'p_E','prueba.py',93),
  ('E -> E operador_division E','E',3,'p_E','prueba.py',94),
  ('E -> E operador_resto E','E',3,'p_E','prueba.py',95),
  ('E -> id','E',1,'p_E','prueba.py',96),
  ('E -> numero','E',1,'p_E','prueba.py',97),
]
